# -*- coding: utf-8 -*-
from odoo import models, api, tools, exceptions, fields
from odoo.tools.translate import _


STATIC_HR_JOB_NAME = 'Partneris'
STATIC_PAYMENT_NAME = 'PSD Mokėjimas'
STATIC_SODRA_PARTNER_CODE = '191630223'


class WallessPsdSepaExport(models.TransientModel):

    _name = 'walless.psd.sepa.export'

    @api.model
    def _default_date(self):
        """Default date -- Current day"""
        return fields.Date.today()

    @api.model
    def _default_export_lines(self):
        """
        Default export lines -- Generated by fetching all related partners from employees
        that are of Partner job_id. Create lines with this partner as ultimate debtor
        :return: [(6, 0, [IDs])] if hr.job was found else None
        """
        hr_job = self.env['hr.job'].search([('name', '=', STATIC_HR_JOB_NAME)])
        default_currency = self.env.user.company_id.currency_id
        default_date = self.date or self._default_date()

        default_partner = self.env['res.partner'].search([('kodas', '=', STATIC_SODRA_PARTNER_CODE)])
        bank_account_id = default_partner.get_preferred_bank(self.journal_id)

        if hr_job:
            ultimate_debtors = self.env['hr.employee'].search(
                [('job_id', '=', hr_job.id)]).mapped('address_home_id')
            export_lines = []
            for ultimate_debtor in ultimate_debtors:
                export_line = self.env['walless.psd.sepa.export.line'].create({
                    'date': default_date,
                    'name': STATIC_PAYMENT_NAME,
                    'ultimate_debtor_id': ultimate_debtor.id,
                    'partner_id': default_partner.id,
                    'currency_id': default_currency.id,
                    'bank_account_id': bank_account_id.id
                })
                export_lines.append(export_line.id)

            return [(6, 0, export_lines)]

    @api.model
    def _default_journal(self):
        """Default journal, type bank"""
        return self.env['account.journal'].search(
            [('type', '=', 'bank'), ('bank_acc_number', '!=', False), ('bank_id', '!=', False)], limit=1)

    export_line_ids = fields.One2many(
        'walless.psd.sepa.export.line', 'wizard_id', string='Eksportuojamos eilutės', default=_default_export_lines)

    date = fields.Date(
        string='Mokėjimo data', default=_default_date, required=True)

    journal_id = fields.Many2one(
        'account.journal', string='Banko sąskaita', default=_default_journal)

    @api.multi
    def check_constraints(self):
        """
        Check constraints for custom walless lines before exporting
        them as SEPA PAIN file.
        :return: None
        """
        self.ensure_one()
        body = str()
        for en, line in enumerate(self.export_line_ids, 1):
            # Get the debtor code
            debtor_code = line.ultimate_debtor_id.kodas
            if not debtor_code:
                # If debtor code does not exist, check for identification id in related employees
                employees = line.ultimate_debtor_id.with_context(active_test=False).employee_ids
                if employees:
                    debtor_code = employees[0].identification_id
            if not debtor_code:
                body += _('{} Eilutės partneris neturi nustatyto asmens kodo.\n').format(en)
            if tools.float_is_zero(line.amount, precision_digits=2):
                body += _('{} Eilutė neuturi įvestos pavedimo sumos.\n').format(en)
            if not line.date:
                body += _('{} Eilutė neuturi įvestos datos.\n').format(en)
            if not line.partner_id.bank_ids:
                body += '{} Eilutės partneris neturi sukonfigūruotų bankų.\n'.format(en)
        if body:
            body = _('Nepavyko išeksportuoti eilučių dėl šių klaidų: \n\n') + body
            raise exceptions.ValidationError(body)

    @api.multi
    def button_generate_xml(self):
        """
        Generate custom Walless PSD PAIN XML file and return downloadable action
        :return: download action (dict)
        """
        self.ensure_one()
        self.check_constraints()
        attach_obj = self.env['ir.attachment'].sudo()
        statement_id = self.create_artificial_statement()
        attach_id = statement_id.with_context(ultimate_debtor_export=True).export_sepa_attachment()

        # We do it like that so we can unlink the statement before returning the action
        attach_vals = attach_id.read(['datas', 'datas_fname', 'name'])[0]
        statement_id.unlink()

        attach_vals['res_model'] = 'res.company'
        attach_vals['res_id'] = self.env.user.company_id.id
        attach_id = attach_obj.with_context({}).create(attach_vals)
        return {
            'type': 'ir.actions.act_url',
            'url': '/web/binary/download?res_model=res.company&res_id=%s&attach_id=%s' % (
                self.env.user.company_id.id, attach_id.id),
            'target': 'self',
        }

    @api.multi
    def create_artificial_statement(self):
        """
        Create artificial account.bank.statement record that is used for
        SEPA file exporting. Record will be unlinked after the operations.
        :return: account.bank.statement record
        """
        self.ensure_one()
        company_id = self.env.user.company_id

        journal_currency_id = self.journal_id.currency_id or company_id.currency_id
        statement_lines = []
        for export_line in self.export_line_ids:
            amount_to_use = export_line.amount
            if export_line.currency_id != journal_currency_id:
                amount_to_use = export_line.currency_id.with_context(
                    date=export_line.date).compute(export_line.amount, journal_currency_id)

            line_vals = {'company_id': self.env.user.company_id.id,
                         'date': export_line.date,
                         'name': export_line.name,
                         'amount': -abs(amount_to_use),  # Ensure negative number
                         'partner_id': export_line.partner_id.id,
                         'ultimate_debtor_id': export_line.ultimate_debtor_id.id,
                         'bank_account_id': export_line.bank_account_id.id,
                         'info_type': 'structured'}

            if export_line.partner_id.imokos_kodas:
                line_vals.update({'name': export_line.partner_id.imokos_kodas})
            statement_lines.append((0, 0, line_vals))

        statement_vals = {'name': 'Walless PSD',
                          'date': self.date,
                          'company_id': company_id.id,
                          'journal_id': self.journal_id.id,
                          'line_ids': statement_lines,
                          'state': 'open'}
        bank_statement = self.sudo().env['account.bank.statement'].create(statement_vals)
        return bank_statement

    @api.model
    def action_create_wizard(self):
        """
        Action to create self record before opening the wizard,
        so the on-changes behave correctly
        :return: wizard action (dict)
        """
        res = self.env['walless.psd.sepa.export'].create({})
        return {
            'name': _('PSD SEPA eksportavimas'),
            'view_type': 'form',
            'view_mode': 'form',
            'view_id': self.env.ref('apb_walless.form_walless_psd_sepa_export').id,
            'res_id': res.id,
            'res_model': 'walless.psd.sepa.export',
            'type': 'ir.actions.act_window',
            'target': 'new',
        }


WallessPsdSepaExport()

